#!/usr/bin/env node

var path = require('path')
var program = require('cmdenv')('micromono')
var SuperPipe = require('superpipe')
var AssetPipe = require('../lib/web/asset')
var bundleAsset = require('../lib/web/asset/pipeline').bundleAsset
var LocalServicePipe = require('../lib/service/local')


program
  .usage('[options] path')
  .description('Bundle asset files for given service path')
  .option('-d --bundle-deps', 'Include dependencies when bundling. Default false.')
  .option('-o --out-file [path]', 'Set the path of the output file.')
  .option('--source-maps', 'Enable source maps. Default false.')
  .option('-m --source-map-contents', 'Enable source maps. Default false.')
  .option('--low-res-source-maps', 'Generate low resolution source maps. Default true.')
  .option('-i --inject', 'Inject bundle info into `config.js`. Default true.')
  .option('-z --minify', 'Minify the output files. Default true.')
  .option('-g --mangle', 'Default true.')
  .option('-c --bundle-css', 'Bundle CSS files. Default true.')
  .option('-s --separate-css', 'Bundle CSS into a separate file. Default true.')
  .parse(process.argv)

var servicePath = program.args[0]
if (servicePath) {
  servicePath = path.resolve(servicePath)

  var superpipe = new SuperPipe()
  superpipe
    .setDep(AssetPipe, '*^')
    .setDep(LocalServicePipe, '*^')
    .setDep('packagePath', servicePath)
    .setDep('service', {})
    .setDep('errorHandler', function(err, errPipeName, errPipeBody) {
      console.error('[%s] `bundle` error', errPipeName, errPipeBody, err && err.stack || err)
      process.exit(-1)
    })

  var options = {
    bundleDeps: program.bundleDeps || false,
    sourceMaps: program.sourceMaps || false,
    sourceMapContents: program.sourceMapContents || false,
    lowResSourceMaps: program.lowResSourceMaps || true,
    inject: program.inject || true,
    minify: program.minify || true,
    mangle: program.mangle || true,
    buildCss: program.buildCss || true,
    separateCss: program.separateCss || true
  }

  if (program.outFile)
    options.outFile = program.outFile

  console.log('bundleOptions:', options)

  superpipe.setDep('bundleOptions', options)

  bundleAsset.slice()
    .connect(superpipe)
    .pipe(function(bundleCmd) {
      console.log('jspm ' + bundleCmd)
      console.log('Bundled successfully')
      process.exit(0)
    }, ['bundleCmd'])
    .error('errorHandler', [null, 'errPipeName', 'errPipeBody'])()
} else {
  console.error('\n    Incorrect command line options. Run `micromono bundle -h` for help.\n')
  process.exit(1)
}

